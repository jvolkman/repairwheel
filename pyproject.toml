[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "repairwheel"
version = "0.2.4"
description = "Repair any wheel, anywhere"
readme = "README.md"
requires-python = ">= 3.7"
license.file = "LICENSE"
classifiers = [
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
urls.homepage = "https://github.com/jvolkman/repairwheel"

dependencies = [
  "delvewheel >= 1.3.6",
  "importlib_metadata; python_version < \"3.8\"",
  "macholib >= 1.16",
  "packaging >= 20.9",
  "pyelftools >= 0.24",
  "pefile >= 2023.2.7",  # for delvewheel
]

[project.scripts]
repairwheel = "repairwheel.repair:main"

[tool.black]
line-length = 127
target-version = ["py311", "py310", "py39", "py38", "py37"]
extend-exclude = '''
src/repairwheel/_vendor
'''

[tool.ruff]
line-length = 127
select = [
  "B",    # flake8-bugbear
  "C4",   # flake8-comprehensions
  "C9",   # mccabe
  "E",    # pycodestyle
  "F",    # pyflakes
  "PGH",  # pygrep-hooks
  "RUF",  # ruff
  "UP",   # pyupgrade
  "W",    # pycodestyle
  "W",    # pycodestyle
  "YTT",  # flake8-2020
]
ignore = [
  "C901", # Function is too complex
]
src = ["src"]
target-version = "py37"

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.isort]
lines-between-types = 1
lines-after-imports = 2
known-first-party = ["build"]

[tool.hatch]

[tool.hatch.build.targets.sdist]
exclude = [
  "/.*",
]

[tool.hatch.build.targets.wheel]
packages = ["src/repairwheel"]

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.envs.test]
dependencies = [
  "pytest",
]

[tool.hatch.envs.test.scripts]
test = "pytest -v tests/ --ignore tests/gen_check/"
generate = "pytest -v tests/gen_check/test_generate.py"
check = "pytest -v tests/gen_check/test_check.py"

[tool.vendoring]
destination = "src/repairwheel/_vendor/"
requirements = "src/repairwheel/_vendor/vendor.txt"
namespace = "repairwheel._vendor"

protected-files = ["__init__.py", "vendor.txt"]
patches-dir = "tools/vendoring/patches"

[tool.vendoring.transformations]
drop = [
  "bin/",
  "delocate/tests/",
]
